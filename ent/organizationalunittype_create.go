// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/organizationalunit"
	"entgo.io/bug/ent/organizationalunittype"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationalUnitTypeCreate is the builder for creating a OrganizationalUnitType entity.
type OrganizationalUnitTypeCreate struct {
	config
	mutation *OrganizationalUnitTypeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (outc *OrganizationalUnitTypeCreate) SetName(s string) *OrganizationalUnitTypeCreate {
	outc.mutation.SetName(s)
	return outc
}

// SetID sets the "id" field.
func (outc *OrganizationalUnitTypeCreate) SetID(s string) *OrganizationalUnitTypeCreate {
	outc.mutation.SetID(s)
	return outc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (outc *OrganizationalUnitTypeCreate) SetNillableID(s *string) *OrganizationalUnitTypeCreate {
	if s != nil {
		outc.SetID(*s)
	}
	return outc
}

// AddOrganizationalUnitIDs adds the "organizational_units" edge to the OrganizationalUnit entity by IDs.
func (outc *OrganizationalUnitTypeCreate) AddOrganizationalUnitIDs(ids ...string) *OrganizationalUnitTypeCreate {
	outc.mutation.AddOrganizationalUnitIDs(ids...)
	return outc
}

// AddOrganizationalUnits adds the "organizational_units" edges to the OrganizationalUnit entity.
func (outc *OrganizationalUnitTypeCreate) AddOrganizationalUnits(o ...*OrganizationalUnit) *OrganizationalUnitTypeCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return outc.AddOrganizationalUnitIDs(ids...)
}

// Mutation returns the OrganizationalUnitTypeMutation object of the builder.
func (outc *OrganizationalUnitTypeCreate) Mutation() *OrganizationalUnitTypeMutation {
	return outc.mutation
}

// Save creates the OrganizationalUnitType in the database.
func (outc *OrganizationalUnitTypeCreate) Save(ctx context.Context) (*OrganizationalUnitType, error) {
	var (
		err  error
		node *OrganizationalUnitType
	)
	outc.defaults()
	if len(outc.hooks) == 0 {
		if err = outc.check(); err != nil {
			return nil, err
		}
		node, err = outc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationalUnitTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = outc.check(); err != nil {
				return nil, err
			}
			outc.mutation = mutation
			if node, err = outc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(outc.hooks) - 1; i >= 0; i-- {
			if outc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = outc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, outc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrganizationalUnitType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrganizationalUnitTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (outc *OrganizationalUnitTypeCreate) SaveX(ctx context.Context) *OrganizationalUnitType {
	v, err := outc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (outc *OrganizationalUnitTypeCreate) Exec(ctx context.Context) error {
	_, err := outc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (outc *OrganizationalUnitTypeCreate) ExecX(ctx context.Context) {
	if err := outc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (outc *OrganizationalUnitTypeCreate) defaults() {
	if _, ok := outc.mutation.ID(); !ok {
		v := organizationalunittype.DefaultID
		outc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (outc *OrganizationalUnitTypeCreate) check() error {
	if _, ok := outc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OrganizationalUnitType.name"`)}
	}
	if v, ok := outc.mutation.ID(); ok {
		if err := organizationalunittype.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "OrganizationalUnitType.id": %w`, err)}
		}
	}
	return nil
}

func (outc *OrganizationalUnitTypeCreate) sqlSave(ctx context.Context) (*OrganizationalUnitType, error) {
	_node, _spec := outc.createSpec()
	if err := sqlgraph.CreateNode(ctx, outc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrganizationalUnitType.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (outc *OrganizationalUnitTypeCreate) createSpec() (*OrganizationalUnitType, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationalUnitType{config: outc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: organizationalunittype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationalunittype.FieldID,
			},
		}
	)
	if id, ok := outc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := outc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organizationalunittype.FieldName,
		})
		_node.Name = value
	}
	if nodes := outc.mutation.OrganizationalUnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunittype.OrganizationalUnitsTable,
			Columns: []string{organizationalunittype.OrganizationalUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationalUnitTypeCreateBulk is the builder for creating many OrganizationalUnitType entities in bulk.
type OrganizationalUnitTypeCreateBulk struct {
	config
	builders []*OrganizationalUnitTypeCreate
}

// Save creates the OrganizationalUnitType entities in the database.
func (outcb *OrganizationalUnitTypeCreateBulk) Save(ctx context.Context) ([]*OrganizationalUnitType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(outcb.builders))
	nodes := make([]*OrganizationalUnitType, len(outcb.builders))
	mutators := make([]Mutator, len(outcb.builders))
	for i := range outcb.builders {
		func(i int, root context.Context) {
			builder := outcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationalUnitTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, outcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, outcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, outcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (outcb *OrganizationalUnitTypeCreateBulk) SaveX(ctx context.Context) []*OrganizationalUnitType {
	v, err := outcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (outcb *OrganizationalUnitTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := outcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (outcb *OrganizationalUnitTypeCreateBulk) ExecX(ctx context.Context) {
	if err := outcb.Exec(ctx); err != nil {
		panic(err)
	}
}
