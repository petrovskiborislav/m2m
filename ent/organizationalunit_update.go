// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/ent/organizationalunit"
	"entgo.io/bug/ent/organizationalunittype"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/specialty"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationalUnitUpdate is the builder for updating OrganizationalUnit entities.
type OrganizationalUnitUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationalUnitMutation
}

// Where appends a list predicates to the OrganizationalUnitUpdate builder.
func (ouu *OrganizationalUnitUpdate) Where(ps ...predicate.OrganizationalUnit) *OrganizationalUnitUpdate {
	ouu.mutation.Where(ps...)
	return ouu
}

// SetDisplayName sets the "display_name" field.
func (ouu *OrganizationalUnitUpdate) SetDisplayName(s string) *OrganizationalUnitUpdate {
	ouu.mutation.SetDisplayName(s)
	return ouu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ouu *OrganizationalUnitUpdate) SetNillableDisplayName(s *string) *OrganizationalUnitUpdate {
	if s != nil {
		ouu.SetDisplayName(*s)
	}
	return ouu
}

// SetCreatedAt sets the "created_at" field.
func (ouu *OrganizationalUnitUpdate) SetCreatedAt(t time.Time) *OrganizationalUnitUpdate {
	ouu.mutation.SetCreatedAt(t)
	return ouu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouu *OrganizationalUnitUpdate) SetNillableCreatedAt(t *time.Time) *OrganizationalUnitUpdate {
	if t != nil {
		ouu.SetCreatedAt(*t)
	}
	return ouu
}

// SetDeletedAt sets the "deleted_at" field.
func (ouu *OrganizationalUnitUpdate) SetDeletedAt(t time.Time) *OrganizationalUnitUpdate {
	ouu.mutation.SetDeletedAt(t)
	return ouu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouu *OrganizationalUnitUpdate) SetNillableDeletedAt(t *time.Time) *OrganizationalUnitUpdate {
	if t != nil {
		ouu.SetDeletedAt(*t)
	}
	return ouu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouu *OrganizationalUnitUpdate) ClearDeletedAt() *OrganizationalUnitUpdate {
	ouu.mutation.ClearDeletedAt()
	return ouu
}

// SetParentID sets the "parent_id" field.
func (ouu *OrganizationalUnitUpdate) SetParentID(s string) *OrganizationalUnitUpdate {
	ouu.mutation.SetParentID(s)
	return ouu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ouu *OrganizationalUnitUpdate) SetNillableParentID(s *string) *OrganizationalUnitUpdate {
	if s != nil {
		ouu.SetParentID(*s)
	}
	return ouu
}

// ClearParentID clears the value of the "parent_id" field.
func (ouu *OrganizationalUnitUpdate) ClearParentID() *OrganizationalUnitUpdate {
	ouu.mutation.ClearParentID()
	return ouu
}

// SetMetadata sets the "metadata" field.
func (ouu *OrganizationalUnitUpdate) SetMetadata(s []string) *OrganizationalUnitUpdate {
	ouu.mutation.SetMetadata(s)
	return ouu
}

// SetTypeID sets the "type_id" field.
func (ouu *OrganizationalUnitUpdate) SetTypeID(s string) *OrganizationalUnitUpdate {
	ouu.mutation.SetTypeID(s)
	return ouu
}

// SetParent sets the "parent" edge to the OrganizationalUnit entity.
func (ouu *OrganizationalUnitUpdate) SetParent(o *OrganizationalUnit) *OrganizationalUnitUpdate {
	return ouu.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the OrganizationalUnit entity by IDs.
func (ouu *OrganizationalUnitUpdate) AddChildIDs(ids ...string) *OrganizationalUnitUpdate {
	ouu.mutation.AddChildIDs(ids...)
	return ouu
}

// AddChildren adds the "children" edges to the OrganizationalUnit entity.
func (ouu *OrganizationalUnitUpdate) AddChildren(o ...*OrganizationalUnit) *OrganizationalUnitUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouu.AddChildIDs(ids...)
}

// SetOrganizationalUnitTypeIDID sets the "organizational_unit_type_id" edge to the OrganizationalUnitType entity by ID.
func (ouu *OrganizationalUnitUpdate) SetOrganizationalUnitTypeIDID(id string) *OrganizationalUnitUpdate {
	ouu.mutation.SetOrganizationalUnitTypeIDID(id)
	return ouu
}

// SetOrganizationalUnitTypeID sets the "organizational_unit_type_id" edge to the OrganizationalUnitType entity.
func (ouu *OrganizationalUnitUpdate) SetOrganizationalUnitTypeID(o *OrganizationalUnitType) *OrganizationalUnitUpdate {
	return ouu.SetOrganizationalUnitTypeIDID(o.ID)
}

// AddSpecialtyIDs adds the "specialties" edge to the Specialty entity by IDs.
func (ouu *OrganizationalUnitUpdate) AddSpecialtyIDs(ids ...string) *OrganizationalUnitUpdate {
	ouu.mutation.AddSpecialtyIDs(ids...)
	return ouu
}

// AddSpecialties adds the "specialties" edges to the Specialty entity.
func (ouu *OrganizationalUnitUpdate) AddSpecialties(s ...*Specialty) *OrganizationalUnitUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouu.AddSpecialtyIDs(ids...)
}

// Mutation returns the OrganizationalUnitMutation object of the builder.
func (ouu *OrganizationalUnitUpdate) Mutation() *OrganizationalUnitMutation {
	return ouu.mutation
}

// ClearParent clears the "parent" edge to the OrganizationalUnit entity.
func (ouu *OrganizationalUnitUpdate) ClearParent() *OrganizationalUnitUpdate {
	ouu.mutation.ClearParent()
	return ouu
}

// ClearChildren clears all "children" edges to the OrganizationalUnit entity.
func (ouu *OrganizationalUnitUpdate) ClearChildren() *OrganizationalUnitUpdate {
	ouu.mutation.ClearChildren()
	return ouu
}

// RemoveChildIDs removes the "children" edge to OrganizationalUnit entities by IDs.
func (ouu *OrganizationalUnitUpdate) RemoveChildIDs(ids ...string) *OrganizationalUnitUpdate {
	ouu.mutation.RemoveChildIDs(ids...)
	return ouu
}

// RemoveChildren removes "children" edges to OrganizationalUnit entities.
func (ouu *OrganizationalUnitUpdate) RemoveChildren(o ...*OrganizationalUnit) *OrganizationalUnitUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouu.RemoveChildIDs(ids...)
}

// ClearOrganizationalUnitTypeID clears the "organizational_unit_type_id" edge to the OrganizationalUnitType entity.
func (ouu *OrganizationalUnitUpdate) ClearOrganizationalUnitTypeID() *OrganizationalUnitUpdate {
	ouu.mutation.ClearOrganizationalUnitTypeID()
	return ouu
}

// ClearSpecialties clears all "specialties" edges to the Specialty entity.
func (ouu *OrganizationalUnitUpdate) ClearSpecialties() *OrganizationalUnitUpdate {
	ouu.mutation.ClearSpecialties()
	return ouu
}

// RemoveSpecialtyIDs removes the "specialties" edge to Specialty entities by IDs.
func (ouu *OrganizationalUnitUpdate) RemoveSpecialtyIDs(ids ...string) *OrganizationalUnitUpdate {
	ouu.mutation.RemoveSpecialtyIDs(ids...)
	return ouu
}

// RemoveSpecialties removes "specialties" edges to Specialty entities.
func (ouu *OrganizationalUnitUpdate) RemoveSpecialties(s ...*Specialty) *OrganizationalUnitUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouu.RemoveSpecialtyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ouu *OrganizationalUnitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ouu.hooks) == 0 {
		if err = ouu.check(); err != nil {
			return 0, err
		}
		affected, err = ouu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationalUnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouu.check(); err != nil {
				return 0, err
			}
			ouu.mutation = mutation
			affected, err = ouu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ouu.hooks) - 1; i >= 0; i-- {
			if ouu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouu *OrganizationalUnitUpdate) SaveX(ctx context.Context) int {
	affected, err := ouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ouu *OrganizationalUnitUpdate) Exec(ctx context.Context) error {
	_, err := ouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouu *OrganizationalUnitUpdate) ExecX(ctx context.Context) {
	if err := ouu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouu *OrganizationalUnitUpdate) check() error {
	if _, ok := ouu.mutation.OrganizationalUnitTypeIDID(); ouu.mutation.OrganizationalUnitTypeIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationalUnit.organizational_unit_type_id"`)
	}
	return nil
}

func (ouu *OrganizationalUnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organizationalunit.Table,
			Columns: organizationalunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationalunit.FieldID,
			},
		},
	}
	if ps := ouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organizationalunit.FieldDisplayName,
		})
	}
	if value, ok := ouu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: organizationalunit.FieldCreatedAt,
		})
	}
	if value, ok := ouu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: organizationalunit.FieldDeletedAt,
		})
	}
	if ouu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: organizationalunit.FieldDeletedAt,
		})
	}
	if value, ok := ouu.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: organizationalunit.FieldMetadata,
		})
	}
	if ouu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationalunit.ParentTable,
			Columns: []string{organizationalunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationalunit.ParentTable,
			Columns: []string{organizationalunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunit.ChildrenTable,
			Columns: []string{organizationalunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ouu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunit.ChildrenTable,
			Columns: []string{organizationalunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunit.ChildrenTable,
			Columns: []string{organizationalunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.OrganizationalUnitTypeIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationalunit.OrganizationalUnitTypeIDTable,
			Columns: []string{organizationalunit.OrganizationalUnitTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunittype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.OrganizationalUnitTypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationalunit.OrganizationalUnitTypeIDTable,
			Columns: []string{organizationalunit.OrganizationalUnitTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunittype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.SpecialtiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationalunit.SpecialtiesTable,
			Columns: organizationalunit.SpecialtiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: specialty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.RemovedSpecialtiesIDs(); len(nodes) > 0 && !ouu.mutation.SpecialtiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationalunit.SpecialtiesTable,
			Columns: organizationalunit.SpecialtiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: specialty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.SpecialtiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationalunit.SpecialtiesTable,
			Columns: organizationalunit.SpecialtiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: specialty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationalunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrganizationalUnitUpdateOne is the builder for updating a single OrganizationalUnit entity.
type OrganizationalUnitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationalUnitMutation
}

// SetDisplayName sets the "display_name" field.
func (ouuo *OrganizationalUnitUpdateOne) SetDisplayName(s string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.SetDisplayName(s)
	return ouuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ouuo *OrganizationalUnitUpdateOne) SetNillableDisplayName(s *string) *OrganizationalUnitUpdateOne {
	if s != nil {
		ouuo.SetDisplayName(*s)
	}
	return ouuo
}

// SetCreatedAt sets the "created_at" field.
func (ouuo *OrganizationalUnitUpdateOne) SetCreatedAt(t time.Time) *OrganizationalUnitUpdateOne {
	ouuo.mutation.SetCreatedAt(t)
	return ouuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouuo *OrganizationalUnitUpdateOne) SetNillableCreatedAt(t *time.Time) *OrganizationalUnitUpdateOne {
	if t != nil {
		ouuo.SetCreatedAt(*t)
	}
	return ouuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouuo *OrganizationalUnitUpdateOne) SetDeletedAt(t time.Time) *OrganizationalUnitUpdateOne {
	ouuo.mutation.SetDeletedAt(t)
	return ouuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouuo *OrganizationalUnitUpdateOne) SetNillableDeletedAt(t *time.Time) *OrganizationalUnitUpdateOne {
	if t != nil {
		ouuo.SetDeletedAt(*t)
	}
	return ouuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouuo *OrganizationalUnitUpdateOne) ClearDeletedAt() *OrganizationalUnitUpdateOne {
	ouuo.mutation.ClearDeletedAt()
	return ouuo
}

// SetParentID sets the "parent_id" field.
func (ouuo *OrganizationalUnitUpdateOne) SetParentID(s string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.SetParentID(s)
	return ouuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ouuo *OrganizationalUnitUpdateOne) SetNillableParentID(s *string) *OrganizationalUnitUpdateOne {
	if s != nil {
		ouuo.SetParentID(*s)
	}
	return ouuo
}

// ClearParentID clears the value of the "parent_id" field.
func (ouuo *OrganizationalUnitUpdateOne) ClearParentID() *OrganizationalUnitUpdateOne {
	ouuo.mutation.ClearParentID()
	return ouuo
}

// SetMetadata sets the "metadata" field.
func (ouuo *OrganizationalUnitUpdateOne) SetMetadata(s []string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.SetMetadata(s)
	return ouuo
}

// SetTypeID sets the "type_id" field.
func (ouuo *OrganizationalUnitUpdateOne) SetTypeID(s string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.SetTypeID(s)
	return ouuo
}

// SetParent sets the "parent" edge to the OrganizationalUnit entity.
func (ouuo *OrganizationalUnitUpdateOne) SetParent(o *OrganizationalUnit) *OrganizationalUnitUpdateOne {
	return ouuo.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the OrganizationalUnit entity by IDs.
func (ouuo *OrganizationalUnitUpdateOne) AddChildIDs(ids ...string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.AddChildIDs(ids...)
	return ouuo
}

// AddChildren adds the "children" edges to the OrganizationalUnit entity.
func (ouuo *OrganizationalUnitUpdateOne) AddChildren(o ...*OrganizationalUnit) *OrganizationalUnitUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouuo.AddChildIDs(ids...)
}

// SetOrganizationalUnitTypeIDID sets the "organizational_unit_type_id" edge to the OrganizationalUnitType entity by ID.
func (ouuo *OrganizationalUnitUpdateOne) SetOrganizationalUnitTypeIDID(id string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.SetOrganizationalUnitTypeIDID(id)
	return ouuo
}

// SetOrganizationalUnitTypeID sets the "organizational_unit_type_id" edge to the OrganizationalUnitType entity.
func (ouuo *OrganizationalUnitUpdateOne) SetOrganizationalUnitTypeID(o *OrganizationalUnitType) *OrganizationalUnitUpdateOne {
	return ouuo.SetOrganizationalUnitTypeIDID(o.ID)
}

// AddSpecialtyIDs adds the "specialties" edge to the Specialty entity by IDs.
func (ouuo *OrganizationalUnitUpdateOne) AddSpecialtyIDs(ids ...string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.AddSpecialtyIDs(ids...)
	return ouuo
}

// AddSpecialties adds the "specialties" edges to the Specialty entity.
func (ouuo *OrganizationalUnitUpdateOne) AddSpecialties(s ...*Specialty) *OrganizationalUnitUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouuo.AddSpecialtyIDs(ids...)
}

// Mutation returns the OrganizationalUnitMutation object of the builder.
func (ouuo *OrganizationalUnitUpdateOne) Mutation() *OrganizationalUnitMutation {
	return ouuo.mutation
}

// ClearParent clears the "parent" edge to the OrganizationalUnit entity.
func (ouuo *OrganizationalUnitUpdateOne) ClearParent() *OrganizationalUnitUpdateOne {
	ouuo.mutation.ClearParent()
	return ouuo
}

// ClearChildren clears all "children" edges to the OrganizationalUnit entity.
func (ouuo *OrganizationalUnitUpdateOne) ClearChildren() *OrganizationalUnitUpdateOne {
	ouuo.mutation.ClearChildren()
	return ouuo
}

// RemoveChildIDs removes the "children" edge to OrganizationalUnit entities by IDs.
func (ouuo *OrganizationalUnitUpdateOne) RemoveChildIDs(ids ...string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.RemoveChildIDs(ids...)
	return ouuo
}

// RemoveChildren removes "children" edges to OrganizationalUnit entities.
func (ouuo *OrganizationalUnitUpdateOne) RemoveChildren(o ...*OrganizationalUnit) *OrganizationalUnitUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouuo.RemoveChildIDs(ids...)
}

// ClearOrganizationalUnitTypeID clears the "organizational_unit_type_id" edge to the OrganizationalUnitType entity.
func (ouuo *OrganizationalUnitUpdateOne) ClearOrganizationalUnitTypeID() *OrganizationalUnitUpdateOne {
	ouuo.mutation.ClearOrganizationalUnitTypeID()
	return ouuo
}

// ClearSpecialties clears all "specialties" edges to the Specialty entity.
func (ouuo *OrganizationalUnitUpdateOne) ClearSpecialties() *OrganizationalUnitUpdateOne {
	ouuo.mutation.ClearSpecialties()
	return ouuo
}

// RemoveSpecialtyIDs removes the "specialties" edge to Specialty entities by IDs.
func (ouuo *OrganizationalUnitUpdateOne) RemoveSpecialtyIDs(ids ...string) *OrganizationalUnitUpdateOne {
	ouuo.mutation.RemoveSpecialtyIDs(ids...)
	return ouuo
}

// RemoveSpecialties removes "specialties" edges to Specialty entities.
func (ouuo *OrganizationalUnitUpdateOne) RemoveSpecialties(s ...*Specialty) *OrganizationalUnitUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouuo.RemoveSpecialtyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouuo *OrganizationalUnitUpdateOne) Select(field string, fields ...string) *OrganizationalUnitUpdateOne {
	ouuo.fields = append([]string{field}, fields...)
	return ouuo
}

// Save executes the query and returns the updated OrganizationalUnit entity.
func (ouuo *OrganizationalUnitUpdateOne) Save(ctx context.Context) (*OrganizationalUnit, error) {
	var (
		err  error
		node *OrganizationalUnit
	)
	if len(ouuo.hooks) == 0 {
		if err = ouuo.check(); err != nil {
			return nil, err
		}
		node, err = ouuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationalUnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouuo.check(); err != nil {
				return nil, err
			}
			ouuo.mutation = mutation
			node, err = ouuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouuo.hooks) - 1; i >= 0; i-- {
			if ouuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ouuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrganizationalUnit)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrganizationalUnitMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouuo *OrganizationalUnitUpdateOne) SaveX(ctx context.Context) *OrganizationalUnit {
	node, err := ouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouuo *OrganizationalUnitUpdateOne) Exec(ctx context.Context) error {
	_, err := ouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouuo *OrganizationalUnitUpdateOne) ExecX(ctx context.Context) {
	if err := ouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouuo *OrganizationalUnitUpdateOne) check() error {
	if _, ok := ouuo.mutation.OrganizationalUnitTypeIDID(); ouuo.mutation.OrganizationalUnitTypeIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationalUnit.organizational_unit_type_id"`)
	}
	return nil
}

func (ouuo *OrganizationalUnitUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationalUnit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organizationalunit.Table,
			Columns: organizationalunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationalunit.FieldID,
			},
		},
	}
	id, ok := ouuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationalUnit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationalunit.FieldID)
		for _, f := range fields {
			if !organizationalunit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationalunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organizationalunit.FieldDisplayName,
		})
	}
	if value, ok := ouuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: organizationalunit.FieldCreatedAt,
		})
	}
	if value, ok := ouuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: organizationalunit.FieldDeletedAt,
		})
	}
	if ouuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: organizationalunit.FieldDeletedAt,
		})
	}
	if value, ok := ouuo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: organizationalunit.FieldMetadata,
		})
	}
	if ouuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationalunit.ParentTable,
			Columns: []string{organizationalunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationalunit.ParentTable,
			Columns: []string{organizationalunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunit.ChildrenTable,
			Columns: []string{organizationalunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ouuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunit.ChildrenTable,
			Columns: []string{organizationalunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunit.ChildrenTable,
			Columns: []string{organizationalunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.OrganizationalUnitTypeIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationalunit.OrganizationalUnitTypeIDTable,
			Columns: []string{organizationalunit.OrganizationalUnitTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunittype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.OrganizationalUnitTypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationalunit.OrganizationalUnitTypeIDTable,
			Columns: []string{organizationalunit.OrganizationalUnitTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunittype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.SpecialtiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationalunit.SpecialtiesTable,
			Columns: organizationalunit.SpecialtiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: specialty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.RemovedSpecialtiesIDs(); len(nodes) > 0 && !ouuo.mutation.SpecialtiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationalunit.SpecialtiesTable,
			Columns: organizationalunit.SpecialtiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: specialty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.SpecialtiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationalunit.SpecialtiesTable,
			Columns: organizationalunit.SpecialtiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: specialty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrganizationalUnit{config: ouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationalunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
