// Code generated by ent, DO NOT EDIT.

package ent

import "context"

func (ou *OrganizationalUnit) Parent(ctx context.Context) (*OrganizationalUnit, error) {
	result, err := ou.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ou *OrganizationalUnit) Children(ctx context.Context) ([]*OrganizationalUnit, error) {
	result, err := ou.Edges.ChildrenOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QueryChildren().All(ctx)
	}
	return result, err
}

func (ou *OrganizationalUnit) OrganizationalUnitTypeID(ctx context.Context) (*OrganizationalUnitType, error) {
	result, err := ou.Edges.OrganizationalUnitTypeIDOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QueryOrganizationalUnitTypeID().Only(ctx)
	}
	return result, err
}

func (ou *OrganizationalUnit) Specialties(ctx context.Context) ([]*Specialty, error) {
	result, err := ou.Edges.SpecialtiesOrErr()
	if IsNotLoaded(err) {
		result, err = ou.QuerySpecialties().All(ctx)
	}
	return result, err
}

func (out *OrganizationalUnitType) OrganizationalUnits(ctx context.Context) ([]*OrganizationalUnit, error) {
	result, err := out.Edges.OrganizationalUnitsOrErr()
	if IsNotLoaded(err) {
		result, err = out.QueryOrganizationalUnits().All(ctx)
	}
	return result, err
}

func (s *Specialty) OrganizationalUnits(ctx context.Context) ([]*OrganizationalUnit, error) {
	result, err := s.Edges.OrganizationalUnitsOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryOrganizationalUnits().All(ctx)
	}
	return result, err
}
