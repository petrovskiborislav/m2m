// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/specialty"
	"entgo.io/ent/dialect/sql"
)

// Specialty is the model entity for the Specialty schema.
type Specialty struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpecialtyQuery when eager-loading is set.
	Edges SpecialtyEdges `json:"edges"`
}

// SpecialtyEdges holds the relations/edges for other nodes in the graph.
type SpecialtyEdges struct {
	// OrganizationalUnits holds the value of the organizational_units edge.
	OrganizationalUnits []*OrganizationalUnit `json:"organizational_units,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]*int
}

// OrganizationalUnitsOrErr returns the OrganizationalUnits value or an error if the edge
// was not loaded in eager-loading.
func (e SpecialtyEdges) OrganizationalUnitsOrErr() ([]*OrganizationalUnit, error) {
	if e.loadedTypes[0] {
		return e.OrganizationalUnits, nil
	}
	return nil, &NotLoadedError{edge: "organizational_units"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Specialty) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case specialty.FieldID, specialty.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Specialty", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Specialty fields.
func (s *Specialty) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case specialty.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case specialty.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		}
	}
	return nil
}

// QueryOrganizationalUnits queries the "organizational_units" edge of the Specialty entity.
func (s *Specialty) QueryOrganizationalUnits() *OrganizationalUnitQuery {
	return (&SpecialtyClient{config: s.config}).QueryOrganizationalUnits(s)
}

// Update returns a builder for updating this Specialty.
// Note that you need to call Specialty.Unwrap() before calling this method if this Specialty
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Specialty) Update() *SpecialtyUpdateOne {
	return (&SpecialtyClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Specialty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Specialty) Unwrap() *Specialty {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Specialty is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Specialty) String() string {
	var builder strings.Builder
	builder.WriteString("Specialty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Specialties is a parsable slice of Specialty.
type Specialties []*Specialty

func (s Specialties) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
