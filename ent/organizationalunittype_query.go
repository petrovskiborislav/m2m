// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/bug/ent/organizationalunit"
	"entgo.io/bug/ent/organizationalunittype"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationalUnitTypeQuery is the builder for querying OrganizationalUnitType entities.
type OrganizationalUnitTypeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrganizationalUnitType
	// eager-loading edges.
	withOrganizationalUnits *OrganizationalUnitQuery
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*OrganizationalUnitType) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrganizationalUnitTypeQuery builder.
func (outq *OrganizationalUnitTypeQuery) Where(ps ...predicate.OrganizationalUnitType) *OrganizationalUnitTypeQuery {
	outq.predicates = append(outq.predicates, ps...)
	return outq
}

// Limit adds a limit step to the query.
func (outq *OrganizationalUnitTypeQuery) Limit(limit int) *OrganizationalUnitTypeQuery {
	outq.limit = &limit
	return outq
}

// Offset adds an offset step to the query.
func (outq *OrganizationalUnitTypeQuery) Offset(offset int) *OrganizationalUnitTypeQuery {
	outq.offset = &offset
	return outq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (outq *OrganizationalUnitTypeQuery) Unique(unique bool) *OrganizationalUnitTypeQuery {
	outq.unique = &unique
	return outq
}

// Order adds an order step to the query.
func (outq *OrganizationalUnitTypeQuery) Order(o ...OrderFunc) *OrganizationalUnitTypeQuery {
	outq.order = append(outq.order, o...)
	return outq
}

// QueryOrganizationalUnits chains the current query on the "organizational_units" edge.
func (outq *OrganizationalUnitTypeQuery) QueryOrganizationalUnits() *OrganizationalUnitQuery {
	query := &OrganizationalUnitQuery{config: outq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := outq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := outq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationalunittype.Table, organizationalunittype.FieldID, selector),
			sqlgraph.To(organizationalunit.Table, organizationalunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationalunittype.OrganizationalUnitsTable, organizationalunittype.OrganizationalUnitsColumn),
		)
		fromU = sqlgraph.SetNeighbors(outq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrganizationalUnitType entity from the query.
// Returns a *NotFoundError when no OrganizationalUnitType was found.
func (outq *OrganizationalUnitTypeQuery) First(ctx context.Context) (*OrganizationalUnitType, error) {
	nodes, err := outq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{organizationalunittype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (outq *OrganizationalUnitTypeQuery) FirstX(ctx context.Context) *OrganizationalUnitType {
	node, err := outq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrganizationalUnitType ID from the query.
// Returns a *NotFoundError when no OrganizationalUnitType ID was found.
func (outq *OrganizationalUnitTypeQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = outq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{organizationalunittype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (outq *OrganizationalUnitTypeQuery) FirstIDX(ctx context.Context) string {
	id, err := outq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrganizationalUnitType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrganizationalUnitType entity is found.
// Returns a *NotFoundError when no OrganizationalUnitType entities are found.
func (outq *OrganizationalUnitTypeQuery) Only(ctx context.Context) (*OrganizationalUnitType, error) {
	nodes, err := outq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{organizationalunittype.Label}
	default:
		return nil, &NotSingularError{organizationalunittype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (outq *OrganizationalUnitTypeQuery) OnlyX(ctx context.Context) *OrganizationalUnitType {
	node, err := outq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrganizationalUnitType ID in the query.
// Returns a *NotSingularError when more than one OrganizationalUnitType ID is found.
// Returns a *NotFoundError when no entities are found.
func (outq *OrganizationalUnitTypeQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = outq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{organizationalunittype.Label}
	default:
		err = &NotSingularError{organizationalunittype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (outq *OrganizationalUnitTypeQuery) OnlyIDX(ctx context.Context) string {
	id, err := outq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrganizationalUnitTypes.
func (outq *OrganizationalUnitTypeQuery) All(ctx context.Context) ([]*OrganizationalUnitType, error) {
	if err := outq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return outq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (outq *OrganizationalUnitTypeQuery) AllX(ctx context.Context) []*OrganizationalUnitType {
	nodes, err := outq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrganizationalUnitType IDs.
func (outq *OrganizationalUnitTypeQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := outq.Select(organizationalunittype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (outq *OrganizationalUnitTypeQuery) IDsX(ctx context.Context) []string {
	ids, err := outq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (outq *OrganizationalUnitTypeQuery) Count(ctx context.Context) (int, error) {
	if err := outq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return outq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (outq *OrganizationalUnitTypeQuery) CountX(ctx context.Context) int {
	count, err := outq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (outq *OrganizationalUnitTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := outq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return outq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (outq *OrganizationalUnitTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := outq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrganizationalUnitTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (outq *OrganizationalUnitTypeQuery) Clone() *OrganizationalUnitTypeQuery {
	if outq == nil {
		return nil
	}
	return &OrganizationalUnitTypeQuery{
		config:                  outq.config,
		limit:                   outq.limit,
		offset:                  outq.offset,
		order:                   append([]OrderFunc{}, outq.order...),
		predicates:              append([]predicate.OrganizationalUnitType{}, outq.predicates...),
		withOrganizationalUnits: outq.withOrganizationalUnits.Clone(),
		// clone intermediate query.
		sql:    outq.sql.Clone(),
		path:   outq.path,
		unique: outq.unique,
	}
}

// WithOrganizationalUnits tells the query-builder to eager-load the nodes that are connected to
// the "organizational_units" edge. The optional arguments are used to configure the query builder of the edge.
func (outq *OrganizationalUnitTypeQuery) WithOrganizationalUnits(opts ...func(*OrganizationalUnitQuery)) *OrganizationalUnitTypeQuery {
	query := &OrganizationalUnitQuery{config: outq.config}
	for _, opt := range opts {
		opt(query)
	}
	outq.withOrganizationalUnits = query
	return outq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrganizationalUnitType.Query().
//		GroupBy(organizationalunittype.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (outq *OrganizationalUnitTypeQuery) GroupBy(field string, fields ...string) *OrganizationalUnitTypeGroupBy {
	grbuild := &OrganizationalUnitTypeGroupBy{config: outq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := outq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return outq.sqlQuery(ctx), nil
	}
	grbuild.label = organizationalunittype.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.OrganizationalUnitType.Query().
//		Select(organizationalunittype.FieldName).
//		Scan(ctx, &v)
//
func (outq *OrganizationalUnitTypeQuery) Select(fields ...string) *OrganizationalUnitTypeSelect {
	outq.fields = append(outq.fields, fields...)
	selbuild := &OrganizationalUnitTypeSelect{OrganizationalUnitTypeQuery: outq}
	selbuild.label = organizationalunittype.Label
	selbuild.flds, selbuild.scan = &outq.fields, selbuild.Scan
	return selbuild
}

func (outq *OrganizationalUnitTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range outq.fields {
		if !organizationalunittype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if outq.path != nil {
		prev, err := outq.path(ctx)
		if err != nil {
			return err
		}
		outq.sql = prev
	}
	return nil
}

func (outq *OrganizationalUnitTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrganizationalUnitType, error) {
	var (
		nodes       = []*OrganizationalUnitType{}
		_spec       = outq.querySpec()
		loadedTypes = [1]bool{
			outq.withOrganizationalUnits != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*OrganizationalUnitType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &OrganizationalUnitType{config: outq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(outq.modifiers) > 0 {
		_spec.Modifiers = outq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, outq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := outq.withOrganizationalUnits; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*OrganizationalUnitType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrganizationalUnits = []*OrganizationalUnit{}
		}
		query.Where(predicate.OrganizationalUnit(func(s *sql.Selector) {
			s.Where(sql.InValues(organizationalunittype.OrganizationalUnitsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TypeID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "type_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.OrganizationalUnits = append(node.Edges.OrganizationalUnits, n)
		}
	}

	for i := range outq.loadTotal {
		if err := outq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (outq *OrganizationalUnitTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := outq.querySpec()
	if len(outq.modifiers) > 0 {
		_spec.Modifiers = outq.modifiers
	}
	_spec.Node.Columns = outq.fields
	if len(outq.fields) > 0 {
		_spec.Unique = outq.unique != nil && *outq.unique
	}
	return sqlgraph.CountNodes(ctx, outq.driver, _spec)
}

func (outq *OrganizationalUnitTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := outq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (outq *OrganizationalUnitTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organizationalunittype.Table,
			Columns: organizationalunittype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationalunittype.FieldID,
			},
		},
		From:   outq.sql,
		Unique: true,
	}
	if unique := outq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := outq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationalunittype.FieldID)
		for i := range fields {
			if fields[i] != organizationalunittype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := outq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := outq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := outq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := outq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (outq *OrganizationalUnitTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(outq.driver.Dialect())
	t1 := builder.Table(organizationalunittype.Table)
	columns := outq.fields
	if len(columns) == 0 {
		columns = organizationalunittype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if outq.sql != nil {
		selector = outq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if outq.unique != nil && *outq.unique {
		selector.Distinct()
	}
	for _, p := range outq.predicates {
		p(selector)
	}
	for _, p := range outq.order {
		p(selector)
	}
	if offset := outq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := outq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrganizationalUnitTypeGroupBy is the group-by builder for OrganizationalUnitType entities.
type OrganizationalUnitTypeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (outgb *OrganizationalUnitTypeGroupBy) Aggregate(fns ...AggregateFunc) *OrganizationalUnitTypeGroupBy {
	outgb.fns = append(outgb.fns, fns...)
	return outgb
}

// Scan applies the group-by query and scans the result into the given value.
func (outgb *OrganizationalUnitTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := outgb.path(ctx)
	if err != nil {
		return err
	}
	outgb.sql = query
	return outgb.sqlScan(ctx, v)
}

func (outgb *OrganizationalUnitTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range outgb.fields {
		if !organizationalunittype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := outgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := outgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (outgb *OrganizationalUnitTypeGroupBy) sqlQuery() *sql.Selector {
	selector := outgb.sql.Select()
	aggregation := make([]string, 0, len(outgb.fns))
	for _, fn := range outgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(outgb.fields)+len(outgb.fns))
		for _, f := range outgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(outgb.fields...)...)
}

// OrganizationalUnitTypeSelect is the builder for selecting fields of OrganizationalUnitType entities.
type OrganizationalUnitTypeSelect struct {
	*OrganizationalUnitTypeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (outs *OrganizationalUnitTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := outs.prepareQuery(ctx); err != nil {
		return err
	}
	outs.sql = outs.OrganizationalUnitTypeQuery.sqlQuery(ctx)
	return outs.sqlScan(ctx, v)
}

func (outs *OrganizationalUnitTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := outs.sql.Query()
	if err := outs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
