// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/bug/ent/organizationalunit"
	"entgo.io/bug/ent/organizationalunittype"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/specialty"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrganizationalUnit     = "OrganizationalUnit"
	TypeOrganizationalUnitType = "OrganizationalUnitType"
	TypeSpecialty              = "Specialty"
)

// OrganizationalUnitMutation represents an operation that mutates the OrganizationalUnit nodes in the graph.
type OrganizationalUnitMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *string
	display_name                       *string
	created_at                         *time.Time
	deleted_at                         *time.Time
	metadata                           *[]string
	clearedFields                      map[string]struct{}
	parent                             *string
	clearedparent                      bool
	children                           map[string]struct{}
	removedchildren                    map[string]struct{}
	clearedchildren                    bool
	organizational_unit_type_id        *string
	clearedorganizational_unit_type_id bool
	specialties                        map[string]struct{}
	removedspecialties                 map[string]struct{}
	clearedspecialties                 bool
	done                               bool
	oldValue                           func(context.Context) (*OrganizationalUnit, error)
	predicates                         []predicate.OrganizationalUnit
}

var _ ent.Mutation = (*OrganizationalUnitMutation)(nil)

// organizationalunitOption allows management of the mutation configuration using functional options.
type organizationalunitOption func(*OrganizationalUnitMutation)

// newOrganizationalUnitMutation creates new mutation for the OrganizationalUnit entity.
func newOrganizationalUnitMutation(c config, op Op, opts ...organizationalunitOption) *OrganizationalUnitMutation {
	m := &OrganizationalUnitMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganizationalUnit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationalUnitID sets the ID field of the mutation.
func withOrganizationalUnitID(id string) organizationalunitOption {
	return func(m *OrganizationalUnitMutation) {
		var (
			err   error
			once  sync.Once
			value *OrganizationalUnit
		)
		m.oldValue = func(ctx context.Context) (*OrganizationalUnit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrganizationalUnit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganizationalUnit sets the old OrganizationalUnit of the mutation.
func withOrganizationalUnit(node *OrganizationalUnit) organizationalunitOption {
	return func(m *OrganizationalUnitMutation) {
		m.oldValue = func(context.Context) (*OrganizationalUnit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationalUnitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationalUnitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrganizationalUnit entities.
func (m *OrganizationalUnitMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationalUnitMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationalUnitMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrganizationalUnit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplayName sets the "display_name" field.
func (m *OrganizationalUnitMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *OrganizationalUnitMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the OrganizationalUnit entity.
// If the OrganizationalUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationalUnitMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *OrganizationalUnitMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OrganizationalUnitMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrganizationalUnitMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrganizationalUnit entity.
// If the OrganizationalUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationalUnitMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrganizationalUnitMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrganizationalUnitMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrganizationalUnitMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrganizationalUnit entity.
// If the OrganizationalUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationalUnitMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrganizationalUnitMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[organizationalunit.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrganizationalUnitMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[organizationalunit.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrganizationalUnitMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, organizationalunit.FieldDeletedAt)
}

// SetParentID sets the "parent_id" field.
func (m *OrganizationalUnitMutation) SetParentID(s string) {
	m.parent = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *OrganizationalUnitMutation) ParentID() (r string, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the OrganizationalUnit entity.
// If the OrganizationalUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationalUnitMutation) OldParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *OrganizationalUnitMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[organizationalunit.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *OrganizationalUnitMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[organizationalunit.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *OrganizationalUnitMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, organizationalunit.FieldParentID)
}

// SetMetadata sets the "metadata" field.
func (m *OrganizationalUnitMutation) SetMetadata(s []string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *OrganizationalUnitMutation) Metadata() (r []string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the OrganizationalUnit entity.
// If the OrganizationalUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationalUnitMutation) OldMetadata(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *OrganizationalUnitMutation) ResetMetadata() {
	m.metadata = nil
}

// SetTypeID sets the "type_id" field.
func (m *OrganizationalUnitMutation) SetTypeID(s string) {
	m.organizational_unit_type_id = &s
}

// TypeID returns the value of the "type_id" field in the mutation.
func (m *OrganizationalUnitMutation) TypeID() (r string, exists bool) {
	v := m.organizational_unit_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeID returns the old "type_id" field's value of the OrganizationalUnit entity.
// If the OrganizationalUnit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationalUnitMutation) OldTypeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeID: %w", err)
	}
	return oldValue.TypeID, nil
}

// ResetTypeID resets all changes to the "type_id" field.
func (m *OrganizationalUnitMutation) ResetTypeID() {
	m.organizational_unit_type_id = nil
}

// ClearParent clears the "parent" edge to the OrganizationalUnit entity.
func (m *OrganizationalUnitMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the OrganizationalUnit entity was cleared.
func (m *OrganizationalUnitMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *OrganizationalUnitMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *OrganizationalUnitMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the OrganizationalUnit entity by ids.
func (m *OrganizationalUnitMutation) AddChildIDs(ids ...string) {
	if m.children == nil {
		m.children = make(map[string]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the OrganizationalUnit entity.
func (m *OrganizationalUnitMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the OrganizationalUnit entity was cleared.
func (m *OrganizationalUnitMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the OrganizationalUnit entity by IDs.
func (m *OrganizationalUnitMutation) RemoveChildIDs(ids ...string) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the OrganizationalUnit entity.
func (m *OrganizationalUnitMutation) RemovedChildrenIDs() (ids []string) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OrganizationalUnitMutation) ChildrenIDs() (ids []string) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OrganizationalUnitMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// SetOrganizationalUnitTypeIDID sets the "organizational_unit_type_id" edge to the OrganizationalUnitType entity by id.
func (m *OrganizationalUnitMutation) SetOrganizationalUnitTypeIDID(id string) {
	m.organizational_unit_type_id = &id
}

// ClearOrganizationalUnitTypeID clears the "organizational_unit_type_id" edge to the OrganizationalUnitType entity.
func (m *OrganizationalUnitMutation) ClearOrganizationalUnitTypeID() {
	m.clearedorganizational_unit_type_id = true
}

// OrganizationalUnitTypeIDCleared reports if the "organizational_unit_type_id" edge to the OrganizationalUnitType entity was cleared.
func (m *OrganizationalUnitMutation) OrganizationalUnitTypeIDCleared() bool {
	return m.clearedorganizational_unit_type_id
}

// OrganizationalUnitTypeIDID returns the "organizational_unit_type_id" edge ID in the mutation.
func (m *OrganizationalUnitMutation) OrganizationalUnitTypeIDID() (id string, exists bool) {
	if m.organizational_unit_type_id != nil {
		return *m.organizational_unit_type_id, true
	}
	return
}

// OrganizationalUnitTypeIDIDs returns the "organizational_unit_type_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationalUnitTypeIDID instead. It exists only for internal usage by the builders.
func (m *OrganizationalUnitMutation) OrganizationalUnitTypeIDIDs() (ids []string) {
	if id := m.organizational_unit_type_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganizationalUnitTypeID resets all changes to the "organizational_unit_type_id" edge.
func (m *OrganizationalUnitMutation) ResetOrganizationalUnitTypeID() {
	m.organizational_unit_type_id = nil
	m.clearedorganizational_unit_type_id = false
}

// AddSpecialtyIDs adds the "specialties" edge to the Specialty entity by ids.
func (m *OrganizationalUnitMutation) AddSpecialtyIDs(ids ...string) {
	if m.specialties == nil {
		m.specialties = make(map[string]struct{})
	}
	for i := range ids {
		m.specialties[ids[i]] = struct{}{}
	}
}

// ClearSpecialties clears the "specialties" edge to the Specialty entity.
func (m *OrganizationalUnitMutation) ClearSpecialties() {
	m.clearedspecialties = true
}

// SpecialtiesCleared reports if the "specialties" edge to the Specialty entity was cleared.
func (m *OrganizationalUnitMutation) SpecialtiesCleared() bool {
	return m.clearedspecialties
}

// RemoveSpecialtyIDs removes the "specialties" edge to the Specialty entity by IDs.
func (m *OrganizationalUnitMutation) RemoveSpecialtyIDs(ids ...string) {
	if m.removedspecialties == nil {
		m.removedspecialties = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.specialties, ids[i])
		m.removedspecialties[ids[i]] = struct{}{}
	}
}

// RemovedSpecialties returns the removed IDs of the "specialties" edge to the Specialty entity.
func (m *OrganizationalUnitMutation) RemovedSpecialtiesIDs() (ids []string) {
	for id := range m.removedspecialties {
		ids = append(ids, id)
	}
	return
}

// SpecialtiesIDs returns the "specialties" edge IDs in the mutation.
func (m *OrganizationalUnitMutation) SpecialtiesIDs() (ids []string) {
	for id := range m.specialties {
		ids = append(ids, id)
	}
	return
}

// ResetSpecialties resets all changes to the "specialties" edge.
func (m *OrganizationalUnitMutation) ResetSpecialties() {
	m.specialties = nil
	m.clearedspecialties = false
	m.removedspecialties = nil
}

// Where appends a list predicates to the OrganizationalUnitMutation builder.
func (m *OrganizationalUnitMutation) Where(ps ...predicate.OrganizationalUnit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrganizationalUnitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrganizationalUnit).
func (m *OrganizationalUnitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationalUnitMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.display_name != nil {
		fields = append(fields, organizationalunit.FieldDisplayName)
	}
	if m.created_at != nil {
		fields = append(fields, organizationalunit.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, organizationalunit.FieldDeletedAt)
	}
	if m.parent != nil {
		fields = append(fields, organizationalunit.FieldParentID)
	}
	if m.metadata != nil {
		fields = append(fields, organizationalunit.FieldMetadata)
	}
	if m.organizational_unit_type_id != nil {
		fields = append(fields, organizationalunit.FieldTypeID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationalUnitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organizationalunit.FieldDisplayName:
		return m.DisplayName()
	case organizationalunit.FieldCreatedAt:
		return m.CreatedAt()
	case organizationalunit.FieldDeletedAt:
		return m.DeletedAt()
	case organizationalunit.FieldParentID:
		return m.ParentID()
	case organizationalunit.FieldMetadata:
		return m.Metadata()
	case organizationalunit.FieldTypeID:
		return m.TypeID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationalUnitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organizationalunit.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case organizationalunit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case organizationalunit.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case organizationalunit.FieldParentID:
		return m.OldParentID(ctx)
	case organizationalunit.FieldMetadata:
		return m.OldMetadata(ctx)
	case organizationalunit.FieldTypeID:
		return m.OldTypeID(ctx)
	}
	return nil, fmt.Errorf("unknown OrganizationalUnit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationalUnitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organizationalunit.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case organizationalunit.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case organizationalunit.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case organizationalunit.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case organizationalunit.FieldMetadata:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case organizationalunit.FieldTypeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeID(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationalUnit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationalUnitMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationalUnitMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationalUnitMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OrganizationalUnit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationalUnitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(organizationalunit.FieldDeletedAt) {
		fields = append(fields, organizationalunit.FieldDeletedAt)
	}
	if m.FieldCleared(organizationalunit.FieldParentID) {
		fields = append(fields, organizationalunit.FieldParentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationalUnitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationalUnitMutation) ClearField(name string) error {
	switch name {
	case organizationalunit.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case organizationalunit.FieldParentID:
		m.ClearParentID()
		return nil
	}
	return fmt.Errorf("unknown OrganizationalUnit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationalUnitMutation) ResetField(name string) error {
	switch name {
	case organizationalunit.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case organizationalunit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case organizationalunit.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case organizationalunit.FieldParentID:
		m.ResetParentID()
		return nil
	case organizationalunit.FieldMetadata:
		m.ResetMetadata()
		return nil
	case organizationalunit.FieldTypeID:
		m.ResetTypeID()
		return nil
	}
	return fmt.Errorf("unknown OrganizationalUnit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationalUnitMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.parent != nil {
		edges = append(edges, organizationalunit.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, organizationalunit.EdgeChildren)
	}
	if m.organizational_unit_type_id != nil {
		edges = append(edges, organizationalunit.EdgeOrganizationalUnitTypeID)
	}
	if m.specialties != nil {
		edges = append(edges, organizationalunit.EdgeSpecialties)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationalUnitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organizationalunit.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case organizationalunit.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case organizationalunit.EdgeOrganizationalUnitTypeID:
		if id := m.organizational_unit_type_id; id != nil {
			return []ent.Value{*id}
		}
	case organizationalunit.EdgeSpecialties:
		ids := make([]ent.Value, 0, len(m.specialties))
		for id := range m.specialties {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationalUnitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedchildren != nil {
		edges = append(edges, organizationalunit.EdgeChildren)
	}
	if m.removedspecialties != nil {
		edges = append(edges, organizationalunit.EdgeSpecialties)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationalUnitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organizationalunit.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case organizationalunit.EdgeSpecialties:
		ids := make([]ent.Value, 0, len(m.removedspecialties))
		for id := range m.removedspecialties {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationalUnitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedparent {
		edges = append(edges, organizationalunit.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, organizationalunit.EdgeChildren)
	}
	if m.clearedorganizational_unit_type_id {
		edges = append(edges, organizationalunit.EdgeOrganizationalUnitTypeID)
	}
	if m.clearedspecialties {
		edges = append(edges, organizationalunit.EdgeSpecialties)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationalUnitMutation) EdgeCleared(name string) bool {
	switch name {
	case organizationalunit.EdgeParent:
		return m.clearedparent
	case organizationalunit.EdgeChildren:
		return m.clearedchildren
	case organizationalunit.EdgeOrganizationalUnitTypeID:
		return m.clearedorganizational_unit_type_id
	case organizationalunit.EdgeSpecialties:
		return m.clearedspecialties
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationalUnitMutation) ClearEdge(name string) error {
	switch name {
	case organizationalunit.EdgeParent:
		m.ClearParent()
		return nil
	case organizationalunit.EdgeOrganizationalUnitTypeID:
		m.ClearOrganizationalUnitTypeID()
		return nil
	}
	return fmt.Errorf("unknown OrganizationalUnit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationalUnitMutation) ResetEdge(name string) error {
	switch name {
	case organizationalunit.EdgeParent:
		m.ResetParent()
		return nil
	case organizationalunit.EdgeChildren:
		m.ResetChildren()
		return nil
	case organizationalunit.EdgeOrganizationalUnitTypeID:
		m.ResetOrganizationalUnitTypeID()
		return nil
	case organizationalunit.EdgeSpecialties:
		m.ResetSpecialties()
		return nil
	}
	return fmt.Errorf("unknown OrganizationalUnit edge %s", name)
}

// OrganizationalUnitTypeMutation represents an operation that mutates the OrganizationalUnitType nodes in the graph.
type OrganizationalUnitTypeMutation struct {
	config
	op                          Op
	typ                         string
	id                          *string
	name                        *string
	clearedFields               map[string]struct{}
	organizational_units        map[string]struct{}
	removedorganizational_units map[string]struct{}
	clearedorganizational_units bool
	done                        bool
	oldValue                    func(context.Context) (*OrganizationalUnitType, error)
	predicates                  []predicate.OrganizationalUnitType
}

var _ ent.Mutation = (*OrganizationalUnitTypeMutation)(nil)

// organizationalunittypeOption allows management of the mutation configuration using functional options.
type organizationalunittypeOption func(*OrganizationalUnitTypeMutation)

// newOrganizationalUnitTypeMutation creates new mutation for the OrganizationalUnitType entity.
func newOrganizationalUnitTypeMutation(c config, op Op, opts ...organizationalunittypeOption) *OrganizationalUnitTypeMutation {
	m := &OrganizationalUnitTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganizationalUnitType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationalUnitTypeID sets the ID field of the mutation.
func withOrganizationalUnitTypeID(id string) organizationalunittypeOption {
	return func(m *OrganizationalUnitTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *OrganizationalUnitType
		)
		m.oldValue = func(ctx context.Context) (*OrganizationalUnitType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrganizationalUnitType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganizationalUnitType sets the old OrganizationalUnitType of the mutation.
func withOrganizationalUnitType(node *OrganizationalUnitType) organizationalunittypeOption {
	return func(m *OrganizationalUnitTypeMutation) {
		m.oldValue = func(context.Context) (*OrganizationalUnitType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationalUnitTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationalUnitTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrganizationalUnitType entities.
func (m *OrganizationalUnitTypeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationalUnitTypeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationalUnitTypeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrganizationalUnitType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *OrganizationalUnitTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrganizationalUnitTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OrganizationalUnitType entity.
// If the OrganizationalUnitType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationalUnitTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrganizationalUnitTypeMutation) ResetName() {
	m.name = nil
}

// AddOrganizationalUnitIDs adds the "organizational_units" edge to the OrganizationalUnit entity by ids.
func (m *OrganizationalUnitTypeMutation) AddOrganizationalUnitIDs(ids ...string) {
	if m.organizational_units == nil {
		m.organizational_units = make(map[string]struct{})
	}
	for i := range ids {
		m.organizational_units[ids[i]] = struct{}{}
	}
}

// ClearOrganizationalUnits clears the "organizational_units" edge to the OrganizationalUnit entity.
func (m *OrganizationalUnitTypeMutation) ClearOrganizationalUnits() {
	m.clearedorganizational_units = true
}

// OrganizationalUnitsCleared reports if the "organizational_units" edge to the OrganizationalUnit entity was cleared.
func (m *OrganizationalUnitTypeMutation) OrganizationalUnitsCleared() bool {
	return m.clearedorganizational_units
}

// RemoveOrganizationalUnitIDs removes the "organizational_units" edge to the OrganizationalUnit entity by IDs.
func (m *OrganizationalUnitTypeMutation) RemoveOrganizationalUnitIDs(ids ...string) {
	if m.removedorganizational_units == nil {
		m.removedorganizational_units = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.organizational_units, ids[i])
		m.removedorganizational_units[ids[i]] = struct{}{}
	}
}

// RemovedOrganizationalUnits returns the removed IDs of the "organizational_units" edge to the OrganizationalUnit entity.
func (m *OrganizationalUnitTypeMutation) RemovedOrganizationalUnitsIDs() (ids []string) {
	for id := range m.removedorganizational_units {
		ids = append(ids, id)
	}
	return
}

// OrganizationalUnitsIDs returns the "organizational_units" edge IDs in the mutation.
func (m *OrganizationalUnitTypeMutation) OrganizationalUnitsIDs() (ids []string) {
	for id := range m.organizational_units {
		ids = append(ids, id)
	}
	return
}

// ResetOrganizationalUnits resets all changes to the "organizational_units" edge.
func (m *OrganizationalUnitTypeMutation) ResetOrganizationalUnits() {
	m.organizational_units = nil
	m.clearedorganizational_units = false
	m.removedorganizational_units = nil
}

// Where appends a list predicates to the OrganizationalUnitTypeMutation builder.
func (m *OrganizationalUnitTypeMutation) Where(ps ...predicate.OrganizationalUnitType) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrganizationalUnitTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrganizationalUnitType).
func (m *OrganizationalUnitTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationalUnitTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, organizationalunittype.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationalUnitTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organizationalunittype.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationalUnitTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organizationalunittype.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown OrganizationalUnitType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationalUnitTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organizationalunittype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationalUnitType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationalUnitTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationalUnitTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationalUnitTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OrganizationalUnitType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationalUnitTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationalUnitTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationalUnitTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OrganizationalUnitType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationalUnitTypeMutation) ResetField(name string) error {
	switch name {
	case organizationalunittype.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown OrganizationalUnitType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationalUnitTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.organizational_units != nil {
		edges = append(edges, organizationalunittype.EdgeOrganizationalUnits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationalUnitTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organizationalunittype.EdgeOrganizationalUnits:
		ids := make([]ent.Value, 0, len(m.organizational_units))
		for id := range m.organizational_units {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationalUnitTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedorganizational_units != nil {
		edges = append(edges, organizationalunittype.EdgeOrganizationalUnits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationalUnitTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organizationalunittype.EdgeOrganizationalUnits:
		ids := make([]ent.Value, 0, len(m.removedorganizational_units))
		for id := range m.removedorganizational_units {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationalUnitTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorganizational_units {
		edges = append(edges, organizationalunittype.EdgeOrganizationalUnits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationalUnitTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case organizationalunittype.EdgeOrganizationalUnits:
		return m.clearedorganizational_units
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationalUnitTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown OrganizationalUnitType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationalUnitTypeMutation) ResetEdge(name string) error {
	switch name {
	case organizationalunittype.EdgeOrganizationalUnits:
		m.ResetOrganizationalUnits()
		return nil
	}
	return fmt.Errorf("unknown OrganizationalUnitType edge %s", name)
}

// SpecialtyMutation represents an operation that mutates the Specialty nodes in the graph.
type SpecialtyMutation struct {
	config
	op                          Op
	typ                         string
	id                          *string
	name                        *string
	clearedFields               map[string]struct{}
	organizational_units        map[string]struct{}
	removedorganizational_units map[string]struct{}
	clearedorganizational_units bool
	done                        bool
	oldValue                    func(context.Context) (*Specialty, error)
	predicates                  []predicate.Specialty
}

var _ ent.Mutation = (*SpecialtyMutation)(nil)

// specialtyOption allows management of the mutation configuration using functional options.
type specialtyOption func(*SpecialtyMutation)

// newSpecialtyMutation creates new mutation for the Specialty entity.
func newSpecialtyMutation(c config, op Op, opts ...specialtyOption) *SpecialtyMutation {
	m := &SpecialtyMutation{
		config:        c,
		op:            op,
		typ:           TypeSpecialty,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpecialtyID sets the ID field of the mutation.
func withSpecialtyID(id string) specialtyOption {
	return func(m *SpecialtyMutation) {
		var (
			err   error
			once  sync.Once
			value *Specialty
		)
		m.oldValue = func(ctx context.Context) (*Specialty, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Specialty.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpecialty sets the old Specialty of the mutation.
func withSpecialty(node *Specialty) specialtyOption {
	return func(m *SpecialtyMutation) {
		m.oldValue = func(context.Context) (*Specialty, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpecialtyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpecialtyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Specialty entities.
func (m *SpecialtyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SpecialtyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SpecialtyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Specialty.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SpecialtyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SpecialtyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Specialty entity.
// If the Specialty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpecialtyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SpecialtyMutation) ResetName() {
	m.name = nil
}

// AddOrganizationalUnitIDs adds the "organizational_units" edge to the OrganizationalUnit entity by ids.
func (m *SpecialtyMutation) AddOrganizationalUnitIDs(ids ...string) {
	if m.organizational_units == nil {
		m.organizational_units = make(map[string]struct{})
	}
	for i := range ids {
		m.organizational_units[ids[i]] = struct{}{}
	}
}

// ClearOrganizationalUnits clears the "organizational_units" edge to the OrganizationalUnit entity.
func (m *SpecialtyMutation) ClearOrganizationalUnits() {
	m.clearedorganizational_units = true
}

// OrganizationalUnitsCleared reports if the "organizational_units" edge to the OrganizationalUnit entity was cleared.
func (m *SpecialtyMutation) OrganizationalUnitsCleared() bool {
	return m.clearedorganizational_units
}

// RemoveOrganizationalUnitIDs removes the "organizational_units" edge to the OrganizationalUnit entity by IDs.
func (m *SpecialtyMutation) RemoveOrganizationalUnitIDs(ids ...string) {
	if m.removedorganizational_units == nil {
		m.removedorganizational_units = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.organizational_units, ids[i])
		m.removedorganizational_units[ids[i]] = struct{}{}
	}
}

// RemovedOrganizationalUnits returns the removed IDs of the "organizational_units" edge to the OrganizationalUnit entity.
func (m *SpecialtyMutation) RemovedOrganizationalUnitsIDs() (ids []string) {
	for id := range m.removedorganizational_units {
		ids = append(ids, id)
	}
	return
}

// OrganizationalUnitsIDs returns the "organizational_units" edge IDs in the mutation.
func (m *SpecialtyMutation) OrganizationalUnitsIDs() (ids []string) {
	for id := range m.organizational_units {
		ids = append(ids, id)
	}
	return
}

// ResetOrganizationalUnits resets all changes to the "organizational_units" edge.
func (m *SpecialtyMutation) ResetOrganizationalUnits() {
	m.organizational_units = nil
	m.clearedorganizational_units = false
	m.removedorganizational_units = nil
}

// Where appends a list predicates to the SpecialtyMutation builder.
func (m *SpecialtyMutation) Where(ps ...predicate.Specialty) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SpecialtyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Specialty).
func (m *SpecialtyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SpecialtyMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, specialty.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SpecialtyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case specialty.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SpecialtyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case specialty.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Specialty field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpecialtyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case specialty.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Specialty field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SpecialtyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SpecialtyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpecialtyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Specialty numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SpecialtyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SpecialtyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpecialtyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Specialty nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SpecialtyMutation) ResetField(name string) error {
	switch name {
	case specialty.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Specialty field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SpecialtyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.organizational_units != nil {
		edges = append(edges, specialty.EdgeOrganizationalUnits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SpecialtyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case specialty.EdgeOrganizationalUnits:
		ids := make([]ent.Value, 0, len(m.organizational_units))
		for id := range m.organizational_units {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SpecialtyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedorganizational_units != nil {
		edges = append(edges, specialty.EdgeOrganizationalUnits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SpecialtyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case specialty.EdgeOrganizationalUnits:
		ids := make([]ent.Value, 0, len(m.removedorganizational_units))
		for id := range m.removedorganizational_units {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SpecialtyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorganizational_units {
		edges = append(edges, specialty.EdgeOrganizationalUnits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SpecialtyMutation) EdgeCleared(name string) bool {
	switch name {
	case specialty.EdgeOrganizationalUnits:
		return m.clearedorganizational_units
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SpecialtyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Specialty unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SpecialtyMutation) ResetEdge(name string) error {
	switch name {
	case specialty.EdgeOrganizationalUnits:
		m.ResetOrganizationalUnits()
		return nil
	}
	return fmt.Errorf("unknown Specialty edge %s", name)
}
