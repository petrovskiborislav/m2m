// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/bug/ent/organizationalunit"
	"entgo.io/bug/ent/organizationalunittype"
	"entgo.io/bug/ent/specialty"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    string `msgpack:"i"`
	Value Value  `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// OrganizationalUnitEdge is the edge representation of OrganizationalUnit.
type OrganizationalUnitEdge struct {
	Node   *OrganizationalUnit `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// OrganizationalUnitConnection is the connection containing edges to OrganizationalUnit.
type OrganizationalUnitConnection struct {
	Edges      []*OrganizationalUnitEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

func (c *OrganizationalUnitConnection) build(nodes []*OrganizationalUnit, pager *organizationalunitPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OrganizationalUnit
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OrganizationalUnit {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OrganizationalUnit {
			return nodes[i]
		}
	}
	c.Edges = make([]*OrganizationalUnitEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OrganizationalUnitEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OrganizationalUnitPaginateOption enables pagination customization.
type OrganizationalUnitPaginateOption func(*organizationalunitPager) error

// WithOrganizationalUnitOrder configures pagination ordering.
func WithOrganizationalUnitOrder(order *OrganizationalUnitOrder) OrganizationalUnitPaginateOption {
	if order == nil {
		order = DefaultOrganizationalUnitOrder
	}
	o := *order
	return func(pager *organizationalunitPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrganizationalUnitOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrganizationalUnitFilter configures pagination filter.
func WithOrganizationalUnitFilter(filter func(*OrganizationalUnitQuery) (*OrganizationalUnitQuery, error)) OrganizationalUnitPaginateOption {
	return func(pager *organizationalunitPager) error {
		if filter == nil {
			return errors.New("OrganizationalUnitQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type organizationalunitPager struct {
	order  *OrganizationalUnitOrder
	filter func(*OrganizationalUnitQuery) (*OrganizationalUnitQuery, error)
}

func newOrganizationalUnitPager(opts []OrganizationalUnitPaginateOption) (*organizationalunitPager, error) {
	pager := &organizationalunitPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrganizationalUnitOrder
	}
	return pager, nil
}

func (p *organizationalunitPager) applyFilter(query *OrganizationalUnitQuery) (*OrganizationalUnitQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *organizationalunitPager) toCursor(ou *OrganizationalUnit) Cursor {
	return p.order.Field.toCursor(ou)
}

func (p *organizationalunitPager) applyCursors(query *OrganizationalUnitQuery, after, before *Cursor) *OrganizationalUnitQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOrganizationalUnitOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *organizationalunitPager) applyOrder(query *OrganizationalUnitQuery, reverse bool) *OrganizationalUnitQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOrganizationalUnitOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOrganizationalUnitOrder.Field.field))
	}
	return query
}

func (p *organizationalunitPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOrganizationalUnitOrder.Field {
			b.Comma().Ident(DefaultOrganizationalUnitOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OrganizationalUnit.
func (ou *OrganizationalUnitQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrganizationalUnitPaginateOption,
) (*OrganizationalUnitConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrganizationalUnitPager(opts)
	if err != nil {
		return nil, err
	}
	if ou, err = pager.applyFilter(ou); err != nil {
		return nil, err
	}
	conn := &OrganizationalUnitConnection{Edges: []*OrganizationalUnitEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = ou.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ou.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ou = pager.applyCursors(ou, after, before)
	ou = pager.applyOrder(ou, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ou.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ou.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ou.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OrganizationalUnitOrderField defines the ordering field of OrganizationalUnit.
type OrganizationalUnitOrderField struct {
	field    string
	toCursor func(*OrganizationalUnit) Cursor
}

// OrganizationalUnitOrder defines the ordering of OrganizationalUnit.
type OrganizationalUnitOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *OrganizationalUnitOrderField `json:"field"`
}

// DefaultOrganizationalUnitOrder is the default ordering of OrganizationalUnit.
var DefaultOrganizationalUnitOrder = &OrganizationalUnitOrder{
	Direction: OrderDirectionAsc,
	Field: &OrganizationalUnitOrderField{
		field: organizationalunit.FieldID,
		toCursor: func(ou *OrganizationalUnit) Cursor {
			return Cursor{ID: ou.ID}
		},
	},
}

// ToEdge converts OrganizationalUnit into OrganizationalUnitEdge.
func (ou *OrganizationalUnit) ToEdge(order *OrganizationalUnitOrder) *OrganizationalUnitEdge {
	if order == nil {
		order = DefaultOrganizationalUnitOrder
	}
	return &OrganizationalUnitEdge{
		Node:   ou,
		Cursor: order.Field.toCursor(ou),
	}
}

// OrganizationalUnitTypeEdge is the edge representation of OrganizationalUnitType.
type OrganizationalUnitTypeEdge struct {
	Node   *OrganizationalUnitType `json:"node"`
	Cursor Cursor                  `json:"cursor"`
}

// OrganizationalUnitTypeConnection is the connection containing edges to OrganizationalUnitType.
type OrganizationalUnitTypeConnection struct {
	Edges      []*OrganizationalUnitTypeEdge `json:"edges"`
	PageInfo   PageInfo                      `json:"pageInfo"`
	TotalCount int                           `json:"totalCount"`
}

func (c *OrganizationalUnitTypeConnection) build(nodes []*OrganizationalUnitType, pager *organizationalunittypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OrganizationalUnitType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OrganizationalUnitType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OrganizationalUnitType {
			return nodes[i]
		}
	}
	c.Edges = make([]*OrganizationalUnitTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OrganizationalUnitTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OrganizationalUnitTypePaginateOption enables pagination customization.
type OrganizationalUnitTypePaginateOption func(*organizationalunittypePager) error

// WithOrganizationalUnitTypeOrder configures pagination ordering.
func WithOrganizationalUnitTypeOrder(order *OrganizationalUnitTypeOrder) OrganizationalUnitTypePaginateOption {
	if order == nil {
		order = DefaultOrganizationalUnitTypeOrder
	}
	o := *order
	return func(pager *organizationalunittypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrganizationalUnitTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrganizationalUnitTypeFilter configures pagination filter.
func WithOrganizationalUnitTypeFilter(filter func(*OrganizationalUnitTypeQuery) (*OrganizationalUnitTypeQuery, error)) OrganizationalUnitTypePaginateOption {
	return func(pager *organizationalunittypePager) error {
		if filter == nil {
			return errors.New("OrganizationalUnitTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type organizationalunittypePager struct {
	order  *OrganizationalUnitTypeOrder
	filter func(*OrganizationalUnitTypeQuery) (*OrganizationalUnitTypeQuery, error)
}

func newOrganizationalUnitTypePager(opts []OrganizationalUnitTypePaginateOption) (*organizationalunittypePager, error) {
	pager := &organizationalunittypePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrganizationalUnitTypeOrder
	}
	return pager, nil
}

func (p *organizationalunittypePager) applyFilter(query *OrganizationalUnitTypeQuery) (*OrganizationalUnitTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *organizationalunittypePager) toCursor(out *OrganizationalUnitType) Cursor {
	return p.order.Field.toCursor(out)
}

func (p *organizationalunittypePager) applyCursors(query *OrganizationalUnitTypeQuery, after, before *Cursor) *OrganizationalUnitTypeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOrganizationalUnitTypeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *organizationalunittypePager) applyOrder(query *OrganizationalUnitTypeQuery, reverse bool) *OrganizationalUnitTypeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOrganizationalUnitTypeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOrganizationalUnitTypeOrder.Field.field))
	}
	return query
}

func (p *organizationalunittypePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOrganizationalUnitTypeOrder.Field {
			b.Comma().Ident(DefaultOrganizationalUnitTypeOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OrganizationalUnitType.
func (out *OrganizationalUnitTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrganizationalUnitTypePaginateOption,
) (*OrganizationalUnitTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrganizationalUnitTypePager(opts)
	if err != nil {
		return nil, err
	}
	if out, err = pager.applyFilter(out); err != nil {
		return nil, err
	}
	conn := &OrganizationalUnitTypeConnection{Edges: []*OrganizationalUnitTypeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = out.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := out.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	out = pager.applyCursors(out, after, before)
	out = pager.applyOrder(out, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		out.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := out.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := out.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OrganizationalUnitTypeOrderField defines the ordering field of OrganizationalUnitType.
type OrganizationalUnitTypeOrderField struct {
	field    string
	toCursor func(*OrganizationalUnitType) Cursor
}

// OrganizationalUnitTypeOrder defines the ordering of OrganizationalUnitType.
type OrganizationalUnitTypeOrder struct {
	Direction OrderDirection                    `json:"direction"`
	Field     *OrganizationalUnitTypeOrderField `json:"field"`
}

// DefaultOrganizationalUnitTypeOrder is the default ordering of OrganizationalUnitType.
var DefaultOrganizationalUnitTypeOrder = &OrganizationalUnitTypeOrder{
	Direction: OrderDirectionAsc,
	Field: &OrganizationalUnitTypeOrderField{
		field: organizationalunittype.FieldID,
		toCursor: func(out *OrganizationalUnitType) Cursor {
			return Cursor{ID: out.ID}
		},
	},
}

// ToEdge converts OrganizationalUnitType into OrganizationalUnitTypeEdge.
func (out *OrganizationalUnitType) ToEdge(order *OrganizationalUnitTypeOrder) *OrganizationalUnitTypeEdge {
	if order == nil {
		order = DefaultOrganizationalUnitTypeOrder
	}
	return &OrganizationalUnitTypeEdge{
		Node:   out,
		Cursor: order.Field.toCursor(out),
	}
}

// SpecialtyEdge is the edge representation of Specialty.
type SpecialtyEdge struct {
	Node   *Specialty `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// SpecialtyConnection is the connection containing edges to Specialty.
type SpecialtyConnection struct {
	Edges      []*SpecialtyEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *SpecialtyConnection) build(nodes []*Specialty, pager *specialtyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Specialty
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Specialty {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Specialty {
			return nodes[i]
		}
	}
	c.Edges = make([]*SpecialtyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SpecialtyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SpecialtyPaginateOption enables pagination customization.
type SpecialtyPaginateOption func(*specialtyPager) error

// WithSpecialtyOrder configures pagination ordering.
func WithSpecialtyOrder(order *SpecialtyOrder) SpecialtyPaginateOption {
	if order == nil {
		order = DefaultSpecialtyOrder
	}
	o := *order
	return func(pager *specialtyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSpecialtyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSpecialtyFilter configures pagination filter.
func WithSpecialtyFilter(filter func(*SpecialtyQuery) (*SpecialtyQuery, error)) SpecialtyPaginateOption {
	return func(pager *specialtyPager) error {
		if filter == nil {
			return errors.New("SpecialtyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type specialtyPager struct {
	order  *SpecialtyOrder
	filter func(*SpecialtyQuery) (*SpecialtyQuery, error)
}

func newSpecialtyPager(opts []SpecialtyPaginateOption) (*specialtyPager, error) {
	pager := &specialtyPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSpecialtyOrder
	}
	return pager, nil
}

func (p *specialtyPager) applyFilter(query *SpecialtyQuery) (*SpecialtyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *specialtyPager) toCursor(s *Specialty) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *specialtyPager) applyCursors(query *SpecialtyQuery, after, before *Cursor) *SpecialtyQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSpecialtyOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *specialtyPager) applyOrder(query *SpecialtyQuery, reverse bool) *SpecialtyQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSpecialtyOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSpecialtyOrder.Field.field))
	}
	return query
}

func (p *specialtyPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSpecialtyOrder.Field {
			b.Comma().Ident(DefaultSpecialtyOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Specialty.
func (s *SpecialtyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SpecialtyPaginateOption,
) (*SpecialtyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSpecialtyPager(opts)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &SpecialtyConnection{Edges: []*SpecialtyEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = s.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SpecialtyOrderField defines the ordering field of Specialty.
type SpecialtyOrderField struct {
	field    string
	toCursor func(*Specialty) Cursor
}

// SpecialtyOrder defines the ordering of Specialty.
type SpecialtyOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *SpecialtyOrderField `json:"field"`
}

// DefaultSpecialtyOrder is the default ordering of Specialty.
var DefaultSpecialtyOrder = &SpecialtyOrder{
	Direction: OrderDirectionAsc,
	Field: &SpecialtyOrderField{
		field: specialty.FieldID,
		toCursor: func(s *Specialty) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Specialty into SpecialtyEdge.
func (s *Specialty) ToEdge(order *SpecialtyOrder) *SpecialtyEdge {
	if order == nil {
		order = DefaultSpecialtyOrder
	}
	return &SpecialtyEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}
