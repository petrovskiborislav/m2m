// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"entgo.io/bug/ent/migrate"

	"entgo.io/bug/ent/organizationalunit"
	"entgo.io/bug/ent/organizationalunittype"
	"entgo.io/bug/ent/specialty"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// OrganizationalUnit is the client for interacting with the OrganizationalUnit builders.
	OrganizationalUnit *OrganizationalUnitClient
	// OrganizationalUnitType is the client for interacting with the OrganizationalUnitType builders.
	OrganizationalUnitType *OrganizationalUnitTypeClient
	// Specialty is the client for interacting with the Specialty builders.
	Specialty *SpecialtyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.OrganizationalUnit = NewOrganizationalUnitClient(c.config)
	c.OrganizationalUnitType = NewOrganizationalUnitTypeClient(c.config)
	c.Specialty = NewSpecialtyClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		OrganizationalUnit:     NewOrganizationalUnitClient(cfg),
		OrganizationalUnitType: NewOrganizationalUnitTypeClient(cfg),
		Specialty:              NewSpecialtyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		OrganizationalUnit:     NewOrganizationalUnitClient(cfg),
		OrganizationalUnitType: NewOrganizationalUnitTypeClient(cfg),
		Specialty:              NewSpecialtyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		OrganizationalUnit.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.OrganizationalUnit.Use(hooks...)
	c.OrganizationalUnitType.Use(hooks...)
	c.Specialty.Use(hooks...)
}

// OrganizationalUnitClient is a client for the OrganizationalUnit schema.
type OrganizationalUnitClient struct {
	config
}

// NewOrganizationalUnitClient returns a client for the OrganizationalUnit from the given config.
func NewOrganizationalUnitClient(c config) *OrganizationalUnitClient {
	return &OrganizationalUnitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationalunit.Hooks(f(g(h())))`.
func (c *OrganizationalUnitClient) Use(hooks ...Hook) {
	c.hooks.OrganizationalUnit = append(c.hooks.OrganizationalUnit, hooks...)
}

// Create returns a builder for creating a OrganizationalUnit entity.
func (c *OrganizationalUnitClient) Create() *OrganizationalUnitCreate {
	mutation := newOrganizationalUnitMutation(c.config, OpCreate)
	return &OrganizationalUnitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationalUnit entities.
func (c *OrganizationalUnitClient) CreateBulk(builders ...*OrganizationalUnitCreate) *OrganizationalUnitCreateBulk {
	return &OrganizationalUnitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationalUnit.
func (c *OrganizationalUnitClient) Update() *OrganizationalUnitUpdate {
	mutation := newOrganizationalUnitMutation(c.config, OpUpdate)
	return &OrganizationalUnitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationalUnitClient) UpdateOne(ou *OrganizationalUnit) *OrganizationalUnitUpdateOne {
	mutation := newOrganizationalUnitMutation(c.config, OpUpdateOne, withOrganizationalUnit(ou))
	return &OrganizationalUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationalUnitClient) UpdateOneID(id string) *OrganizationalUnitUpdateOne {
	mutation := newOrganizationalUnitMutation(c.config, OpUpdateOne, withOrganizationalUnitID(id))
	return &OrganizationalUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationalUnit.
func (c *OrganizationalUnitClient) Delete() *OrganizationalUnitDelete {
	mutation := newOrganizationalUnitMutation(c.config, OpDelete)
	return &OrganizationalUnitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationalUnitClient) DeleteOne(ou *OrganizationalUnit) *OrganizationalUnitDeleteOne {
	return c.DeleteOneID(ou.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrganizationalUnitClient) DeleteOneID(id string) *OrganizationalUnitDeleteOne {
	builder := c.Delete().Where(organizationalunit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationalUnitDeleteOne{builder}
}

// Query returns a query builder for OrganizationalUnit.
func (c *OrganizationalUnitClient) Query() *OrganizationalUnitQuery {
	return &OrganizationalUnitQuery{
		config: c.config,
	}
}

// Get returns a OrganizationalUnit entity by its id.
func (c *OrganizationalUnitClient) Get(ctx context.Context, id string) (*OrganizationalUnit, error) {
	return c.Query().Where(organizationalunit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationalUnitClient) GetX(ctx context.Context, id string) *OrganizationalUnit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a OrganizationalUnit.
func (c *OrganizationalUnitClient) QueryParent(ou *OrganizationalUnit) *OrganizationalUnitQuery {
	query := &OrganizationalUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationalunit.Table, organizationalunit.FieldID, id),
			sqlgraph.To(organizationalunit.Table, organizationalunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationalunit.ParentTable, organizationalunit.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a OrganizationalUnit.
func (c *OrganizationalUnitClient) QueryChildren(ou *OrganizationalUnit) *OrganizationalUnitQuery {
	query := &OrganizationalUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationalunit.Table, organizationalunit.FieldID, id),
			sqlgraph.To(organizationalunit.Table, organizationalunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationalunit.ChildrenTable, organizationalunit.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationalUnitTypeID queries the organizational_unit_type_id edge of a OrganizationalUnit.
func (c *OrganizationalUnitClient) QueryOrganizationalUnitTypeID(ou *OrganizationalUnit) *OrganizationalUnitTypeQuery {
	query := &OrganizationalUnitTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationalunit.Table, organizationalunit.FieldID, id),
			sqlgraph.To(organizationalunittype.Table, organizationalunittype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationalunit.OrganizationalUnitTypeIDTable, organizationalunit.OrganizationalUnitTypeIDColumn),
		)
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpecialties queries the specialties edge of a OrganizationalUnit.
func (c *OrganizationalUnitClient) QuerySpecialties(ou *OrganizationalUnit) *SpecialtyQuery {
	query := &SpecialtyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationalunit.Table, organizationalunit.FieldID, id),
			sqlgraph.To(specialty.Table, specialty.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organizationalunit.SpecialtiesTable, organizationalunit.SpecialtiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationalUnitClient) Hooks() []Hook {
	return c.hooks.OrganizationalUnit
}

// OrganizationalUnitTypeClient is a client for the OrganizationalUnitType schema.
type OrganizationalUnitTypeClient struct {
	config
}

// NewOrganizationalUnitTypeClient returns a client for the OrganizationalUnitType from the given config.
func NewOrganizationalUnitTypeClient(c config) *OrganizationalUnitTypeClient {
	return &OrganizationalUnitTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationalunittype.Hooks(f(g(h())))`.
func (c *OrganizationalUnitTypeClient) Use(hooks ...Hook) {
	c.hooks.OrganizationalUnitType = append(c.hooks.OrganizationalUnitType, hooks...)
}

// Create returns a builder for creating a OrganizationalUnitType entity.
func (c *OrganizationalUnitTypeClient) Create() *OrganizationalUnitTypeCreate {
	mutation := newOrganizationalUnitTypeMutation(c.config, OpCreate)
	return &OrganizationalUnitTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationalUnitType entities.
func (c *OrganizationalUnitTypeClient) CreateBulk(builders ...*OrganizationalUnitTypeCreate) *OrganizationalUnitTypeCreateBulk {
	return &OrganizationalUnitTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationalUnitType.
func (c *OrganizationalUnitTypeClient) Update() *OrganizationalUnitTypeUpdate {
	mutation := newOrganizationalUnitTypeMutation(c.config, OpUpdate)
	return &OrganizationalUnitTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationalUnitTypeClient) UpdateOne(out *OrganizationalUnitType) *OrganizationalUnitTypeUpdateOne {
	mutation := newOrganizationalUnitTypeMutation(c.config, OpUpdateOne, withOrganizationalUnitType(out))
	return &OrganizationalUnitTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationalUnitTypeClient) UpdateOneID(id string) *OrganizationalUnitTypeUpdateOne {
	mutation := newOrganizationalUnitTypeMutation(c.config, OpUpdateOne, withOrganizationalUnitTypeID(id))
	return &OrganizationalUnitTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationalUnitType.
func (c *OrganizationalUnitTypeClient) Delete() *OrganizationalUnitTypeDelete {
	mutation := newOrganizationalUnitTypeMutation(c.config, OpDelete)
	return &OrganizationalUnitTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationalUnitTypeClient) DeleteOne(out *OrganizationalUnitType) *OrganizationalUnitTypeDeleteOne {
	return c.DeleteOneID(out.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrganizationalUnitTypeClient) DeleteOneID(id string) *OrganizationalUnitTypeDeleteOne {
	builder := c.Delete().Where(organizationalunittype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationalUnitTypeDeleteOne{builder}
}

// Query returns a query builder for OrganizationalUnitType.
func (c *OrganizationalUnitTypeClient) Query() *OrganizationalUnitTypeQuery {
	return &OrganizationalUnitTypeQuery{
		config: c.config,
	}
}

// Get returns a OrganizationalUnitType entity by its id.
func (c *OrganizationalUnitTypeClient) Get(ctx context.Context, id string) (*OrganizationalUnitType, error) {
	return c.Query().Where(organizationalunittype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationalUnitTypeClient) GetX(ctx context.Context, id string) *OrganizationalUnitType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizationalUnits queries the organizational_units edge of a OrganizationalUnitType.
func (c *OrganizationalUnitTypeClient) QueryOrganizationalUnits(out *OrganizationalUnitType) *OrganizationalUnitQuery {
	query := &OrganizationalUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := out.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationalunittype.Table, organizationalunittype.FieldID, id),
			sqlgraph.To(organizationalunit.Table, organizationalunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organizationalunittype.OrganizationalUnitsTable, organizationalunittype.OrganizationalUnitsColumn),
		)
		fromV = sqlgraph.Neighbors(out.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationalUnitTypeClient) Hooks() []Hook {
	return c.hooks.OrganizationalUnitType
}

// SpecialtyClient is a client for the Specialty schema.
type SpecialtyClient struct {
	config
}

// NewSpecialtyClient returns a client for the Specialty from the given config.
func NewSpecialtyClient(c config) *SpecialtyClient {
	return &SpecialtyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `specialty.Hooks(f(g(h())))`.
func (c *SpecialtyClient) Use(hooks ...Hook) {
	c.hooks.Specialty = append(c.hooks.Specialty, hooks...)
}

// Create returns a builder for creating a Specialty entity.
func (c *SpecialtyClient) Create() *SpecialtyCreate {
	mutation := newSpecialtyMutation(c.config, OpCreate)
	return &SpecialtyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Specialty entities.
func (c *SpecialtyClient) CreateBulk(builders ...*SpecialtyCreate) *SpecialtyCreateBulk {
	return &SpecialtyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Specialty.
func (c *SpecialtyClient) Update() *SpecialtyUpdate {
	mutation := newSpecialtyMutation(c.config, OpUpdate)
	return &SpecialtyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpecialtyClient) UpdateOne(s *Specialty) *SpecialtyUpdateOne {
	mutation := newSpecialtyMutation(c.config, OpUpdateOne, withSpecialty(s))
	return &SpecialtyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpecialtyClient) UpdateOneID(id string) *SpecialtyUpdateOne {
	mutation := newSpecialtyMutation(c.config, OpUpdateOne, withSpecialtyID(id))
	return &SpecialtyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Specialty.
func (c *SpecialtyClient) Delete() *SpecialtyDelete {
	mutation := newSpecialtyMutation(c.config, OpDelete)
	return &SpecialtyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SpecialtyClient) DeleteOne(s *Specialty) *SpecialtyDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SpecialtyClient) DeleteOneID(id string) *SpecialtyDeleteOne {
	builder := c.Delete().Where(specialty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpecialtyDeleteOne{builder}
}

// Query returns a query builder for Specialty.
func (c *SpecialtyClient) Query() *SpecialtyQuery {
	return &SpecialtyQuery{
		config: c.config,
	}
}

// Get returns a Specialty entity by its id.
func (c *SpecialtyClient) Get(ctx context.Context, id string) (*Specialty, error) {
	return c.Query().Where(specialty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpecialtyClient) GetX(ctx context.Context, id string) *Specialty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizationalUnits queries the organizational_units edge of a Specialty.
func (c *SpecialtyClient) QueryOrganizationalUnits(s *Specialty) *OrganizationalUnitQuery {
	query := &OrganizationalUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(specialty.Table, specialty.FieldID, id),
			sqlgraph.To(organizationalunit.Table, organizationalunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, specialty.OrganizationalUnitsTable, specialty.OrganizationalUnitsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpecialtyClient) Hooks() []Hook {
	return c.hooks.Specialty
}
