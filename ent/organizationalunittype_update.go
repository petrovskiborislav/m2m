// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/organizationalunit"
	"entgo.io/bug/ent/organizationalunittype"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationalUnitTypeUpdate is the builder for updating OrganizationalUnitType entities.
type OrganizationalUnitTypeUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationalUnitTypeMutation
}

// Where appends a list predicates to the OrganizationalUnitTypeUpdate builder.
func (outu *OrganizationalUnitTypeUpdate) Where(ps ...predicate.OrganizationalUnitType) *OrganizationalUnitTypeUpdate {
	outu.mutation.Where(ps...)
	return outu
}

// SetName sets the "name" field.
func (outu *OrganizationalUnitTypeUpdate) SetName(s string) *OrganizationalUnitTypeUpdate {
	outu.mutation.SetName(s)
	return outu
}

// AddOrganizationalUnitIDs adds the "organizational_units" edge to the OrganizationalUnit entity by IDs.
func (outu *OrganizationalUnitTypeUpdate) AddOrganizationalUnitIDs(ids ...string) *OrganizationalUnitTypeUpdate {
	outu.mutation.AddOrganizationalUnitIDs(ids...)
	return outu
}

// AddOrganizationalUnits adds the "organizational_units" edges to the OrganizationalUnit entity.
func (outu *OrganizationalUnitTypeUpdate) AddOrganizationalUnits(o ...*OrganizationalUnit) *OrganizationalUnitTypeUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return outu.AddOrganizationalUnitIDs(ids...)
}

// Mutation returns the OrganizationalUnitTypeMutation object of the builder.
func (outu *OrganizationalUnitTypeUpdate) Mutation() *OrganizationalUnitTypeMutation {
	return outu.mutation
}

// ClearOrganizationalUnits clears all "organizational_units" edges to the OrganizationalUnit entity.
func (outu *OrganizationalUnitTypeUpdate) ClearOrganizationalUnits() *OrganizationalUnitTypeUpdate {
	outu.mutation.ClearOrganizationalUnits()
	return outu
}

// RemoveOrganizationalUnitIDs removes the "organizational_units" edge to OrganizationalUnit entities by IDs.
func (outu *OrganizationalUnitTypeUpdate) RemoveOrganizationalUnitIDs(ids ...string) *OrganizationalUnitTypeUpdate {
	outu.mutation.RemoveOrganizationalUnitIDs(ids...)
	return outu
}

// RemoveOrganizationalUnits removes "organizational_units" edges to OrganizationalUnit entities.
func (outu *OrganizationalUnitTypeUpdate) RemoveOrganizationalUnits(o ...*OrganizationalUnit) *OrganizationalUnitTypeUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return outu.RemoveOrganizationalUnitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (outu *OrganizationalUnitTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(outu.hooks) == 0 {
		affected, err = outu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationalUnitTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			outu.mutation = mutation
			affected, err = outu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(outu.hooks) - 1; i >= 0; i-- {
			if outu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = outu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, outu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (outu *OrganizationalUnitTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := outu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (outu *OrganizationalUnitTypeUpdate) Exec(ctx context.Context) error {
	_, err := outu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (outu *OrganizationalUnitTypeUpdate) ExecX(ctx context.Context) {
	if err := outu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (outu *OrganizationalUnitTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organizationalunittype.Table,
			Columns: organizationalunittype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationalunittype.FieldID,
			},
		},
	}
	if ps := outu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := outu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organizationalunittype.FieldName,
		})
	}
	if outu.mutation.OrganizationalUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunittype.OrganizationalUnitsTable,
			Columns: []string{organizationalunittype.OrganizationalUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := outu.mutation.RemovedOrganizationalUnitsIDs(); len(nodes) > 0 && !outu.mutation.OrganizationalUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunittype.OrganizationalUnitsTable,
			Columns: []string{organizationalunittype.OrganizationalUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := outu.mutation.OrganizationalUnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunittype.OrganizationalUnitsTable,
			Columns: []string{organizationalunittype.OrganizationalUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, outu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationalunittype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrganizationalUnitTypeUpdateOne is the builder for updating a single OrganizationalUnitType entity.
type OrganizationalUnitTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationalUnitTypeMutation
}

// SetName sets the "name" field.
func (outuo *OrganizationalUnitTypeUpdateOne) SetName(s string) *OrganizationalUnitTypeUpdateOne {
	outuo.mutation.SetName(s)
	return outuo
}

// AddOrganizationalUnitIDs adds the "organizational_units" edge to the OrganizationalUnit entity by IDs.
func (outuo *OrganizationalUnitTypeUpdateOne) AddOrganizationalUnitIDs(ids ...string) *OrganizationalUnitTypeUpdateOne {
	outuo.mutation.AddOrganizationalUnitIDs(ids...)
	return outuo
}

// AddOrganizationalUnits adds the "organizational_units" edges to the OrganizationalUnit entity.
func (outuo *OrganizationalUnitTypeUpdateOne) AddOrganizationalUnits(o ...*OrganizationalUnit) *OrganizationalUnitTypeUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return outuo.AddOrganizationalUnitIDs(ids...)
}

// Mutation returns the OrganizationalUnitTypeMutation object of the builder.
func (outuo *OrganizationalUnitTypeUpdateOne) Mutation() *OrganizationalUnitTypeMutation {
	return outuo.mutation
}

// ClearOrganizationalUnits clears all "organizational_units" edges to the OrganizationalUnit entity.
func (outuo *OrganizationalUnitTypeUpdateOne) ClearOrganizationalUnits() *OrganizationalUnitTypeUpdateOne {
	outuo.mutation.ClearOrganizationalUnits()
	return outuo
}

// RemoveOrganizationalUnitIDs removes the "organizational_units" edge to OrganizationalUnit entities by IDs.
func (outuo *OrganizationalUnitTypeUpdateOne) RemoveOrganizationalUnitIDs(ids ...string) *OrganizationalUnitTypeUpdateOne {
	outuo.mutation.RemoveOrganizationalUnitIDs(ids...)
	return outuo
}

// RemoveOrganizationalUnits removes "organizational_units" edges to OrganizationalUnit entities.
func (outuo *OrganizationalUnitTypeUpdateOne) RemoveOrganizationalUnits(o ...*OrganizationalUnit) *OrganizationalUnitTypeUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return outuo.RemoveOrganizationalUnitIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (outuo *OrganizationalUnitTypeUpdateOne) Select(field string, fields ...string) *OrganizationalUnitTypeUpdateOne {
	outuo.fields = append([]string{field}, fields...)
	return outuo
}

// Save executes the query and returns the updated OrganizationalUnitType entity.
func (outuo *OrganizationalUnitTypeUpdateOne) Save(ctx context.Context) (*OrganizationalUnitType, error) {
	var (
		err  error
		node *OrganizationalUnitType
	)
	if len(outuo.hooks) == 0 {
		node, err = outuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationalUnitTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			outuo.mutation = mutation
			node, err = outuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(outuo.hooks) - 1; i >= 0; i-- {
			if outuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = outuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, outuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrganizationalUnitType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrganizationalUnitTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (outuo *OrganizationalUnitTypeUpdateOne) SaveX(ctx context.Context) *OrganizationalUnitType {
	node, err := outuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (outuo *OrganizationalUnitTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := outuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (outuo *OrganizationalUnitTypeUpdateOne) ExecX(ctx context.Context) {
	if err := outuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (outuo *OrganizationalUnitTypeUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationalUnitType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organizationalunittype.Table,
			Columns: organizationalunittype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationalunittype.FieldID,
			},
		},
	}
	id, ok := outuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationalUnitType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := outuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationalunittype.FieldID)
		for _, f := range fields {
			if !organizationalunittype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationalunittype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := outuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := outuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organizationalunittype.FieldName,
		})
	}
	if outuo.mutation.OrganizationalUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunittype.OrganizationalUnitsTable,
			Columns: []string{organizationalunittype.OrganizationalUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := outuo.mutation.RemovedOrganizationalUnitsIDs(); len(nodes) > 0 && !outuo.mutation.OrganizationalUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunittype.OrganizationalUnitsTable,
			Columns: []string{organizationalunittype.OrganizationalUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := outuo.mutation.OrganizationalUnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationalunittype.OrganizationalUnitsTable,
			Columns: []string{organizationalunittype.OrganizationalUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: organizationalunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrganizationalUnitType{config: outuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, outuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationalunittype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
