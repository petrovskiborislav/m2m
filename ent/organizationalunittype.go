// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/organizationalunittype"
	"entgo.io/ent/dialect/sql"
)

// OrganizationalUnitType is the model entity for the OrganizationalUnitType schema.
type OrganizationalUnitType struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationalUnitTypeQuery when eager-loading is set.
	Edges OrganizationalUnitTypeEdges `json:"edges"`
}

// OrganizationalUnitTypeEdges holds the relations/edges for other nodes in the graph.
type OrganizationalUnitTypeEdges struct {
	// OrganizationalUnits holds the value of the organizational_units edge.
	OrganizationalUnits []*OrganizationalUnit `json:"organizational_units,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]*int
}

// OrganizationalUnitsOrErr returns the OrganizationalUnits value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationalUnitTypeEdges) OrganizationalUnitsOrErr() ([]*OrganizationalUnit, error) {
	if e.loadedTypes[0] {
		return e.OrganizationalUnits, nil
	}
	return nil, &NotLoadedError{edge: "organizational_units"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationalUnitType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationalunittype.FieldID, organizationalunittype.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrganizationalUnitType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationalUnitType fields.
func (out *OrganizationalUnitType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationalunittype.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				out.ID = value.String
			}
		case organizationalunittype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				out.Name = value.String
			}
		}
	}
	return nil
}

// QueryOrganizationalUnits queries the "organizational_units" edge of the OrganizationalUnitType entity.
func (out *OrganizationalUnitType) QueryOrganizationalUnits() *OrganizationalUnitQuery {
	return (&OrganizationalUnitTypeClient{config: out.config}).QueryOrganizationalUnits(out)
}

// Update returns a builder for updating this OrganizationalUnitType.
// Note that you need to call OrganizationalUnitType.Unwrap() before calling this method if this OrganizationalUnitType
// was returned from a transaction, and the transaction was committed or rolled back.
func (out *OrganizationalUnitType) Update() *OrganizationalUnitTypeUpdateOne {
	return (&OrganizationalUnitTypeClient{config: out.config}).UpdateOne(out)
}

// Unwrap unwraps the OrganizationalUnitType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (out *OrganizationalUnitType) Unwrap() *OrganizationalUnitType {
	_tx, ok := out.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationalUnitType is not a transactional entity")
	}
	out.config.driver = _tx.drv
	return out
}

// String implements the fmt.Stringer.
func (out *OrganizationalUnitType) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationalUnitType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", out.ID))
	builder.WriteString("name=")
	builder.WriteString(out.Name)
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationalUnitTypes is a parsable slice of OrganizationalUnitType.
type OrganizationalUnitTypes []*OrganizationalUnitType

func (out OrganizationalUnitTypes) config(cfg config) {
	for _i := range out {
		out[_i].config = cfg
	}
}
